version: '3.6'
services:
  mapproxy:
    image: wildsong/mapproxy:latest
    build:
      context: .
      dockerfile: Dockerfile.mapproxy

    environment:
    # I tried to create a CMD script (start_mapproxy.sh) to load the environment
    # from a swarm "config" or a volume in compose
    # but apparently that would not work
    # so far this is the only reliable way that works in both places
      - DOMAIN=wildsong.biz
      - MY_EMAIL=webmaster@wildsong.biz
      - VIRTUAL_HOST=mapproxy.wildsong.biz
      - VIRTUAL_PORT=8080
      - LETSENCRYPT_HOST=mapproxy.wildsong.biz
      - LETSENCRYPT_MAIL=brian@wildsong.biz

    volumes:
# I tried this for compose but could not get it to work either
#      - ./mapproxy_env:/mapproxy_env
#
      - config:/srv/mapproxy/config

      # I think this is used for ArcGIS raster tiles
      # so a service using only couchdb probably does not need it
      - cache:/srv/mapproxy/cache

    # This will be passed to start_mapproxy.py and
    # points to a folder, so mapproxy will start as a multiservice.
    command: ['/srv/mapproxy/config/services']
      
# in Swarm, this takes the place of mounting the file
# I suppose the volume command would work in either case... hmmm... wouldn't it?
# I wish env_file worked in Swarm. This is a workaround.
#    configs:
#      - mapproxy_env

    networks:
      proxy_net:
      couchdb_net:
      
    # ArcGIS clients can't connect on HTTP. Portal
    # ALWAYS redirects to port 443, so you HAVE TO listen there (via proxy)
    # Even then SOMETIMES it gives errors and refuses to let you create new
    # connections.  The error is
    # "'https://giscache.co.clatsop.or.us/county-aerials/service?SERVICE=WMS&amp;REQUEST=GetCapabilities'
    # is not accessible: Error. PKIX path building failed:
    # sun.security.provider.certpath.SunCertPathBuilderException:
    # unable to find valid certification path to requested target."
    #
    # The ONLY workaround I have found when it's acting up is to use AGO-Assistant
    # to manually copy an existing service and then edit it.

    # For testing I want to be able to hit the server without any proxy, so, I do this
    ports:
      - "8888:8080"
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 15s

  couchdb:
    image: couchdb:2.3.1
#    env_file: .env
    environment:
      COUCHDATA: /opt/couchdb/data
    # We HAVE to run in party mode for now because
    # I have not figured out how to pass auth from mapproxy to couchdb
      #COUCHDB_USER: ${DB_USER}
      #COUCHDB_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5984:5984"
    volumes:
      - db_data:/opt/couchdb/data
    networks:
      couchdb_net:

volumes:
  config:
      name: mapproxy_config
  cache:
      name: mapproxy_cache
  db_data:
     name: mapproxy_couchdb_data

networks:
  proxy_net:
    name: proxy_net
    external: true
  couchdb_net:
    name: mapproxy_couchdb_net

#configs:
#  mapproxy_env:
#    file: ./mapproxy_env
